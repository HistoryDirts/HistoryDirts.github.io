<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>随机数生成问题</title>
    <link href="/2022/04/10/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E9%97%AE%E9%A2%98/"/>
    <url>/2022/04/10/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="C-语言中的-rand-函数"><a href="#C-语言中的-rand-函数" class="headerlink" title="C 语言中的 rand() 函数"></a>C 语言中的 rand() 函数</h2><p>rand() 函数可以生成 [0, RAND_MAX] 范围内的随机整数，RAND_MAX 通常为 int 类型的最大值，C 规范要求它不能小于 32767。</p><h2 id="如何得到-1-n-的随机整数"><a href="#如何得到-1-n-的随机整数" class="headerlink" title="如何得到 [ 1, n ] 的随机整数"></a>如何得到 [ 1, n ] 的随机整数</h2><p>一个简单的实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> n = <span class="hljs-number">6</span>;<span class="hljs-comment">//例如我想要 [1, 6] 的随机数</span><br>srand(time(<span class="hljs-literal">NULL</span>));<br><span class="hljs-keyword">int</span> random = <span class="hljs-number">1</span> + rand() % <span class="hljs-number">6</span>;<br></code></pre></td></tr></table></figure><p>我们可以很自然地想到利用取模运算得到 [0, 5] 的随机数，然后将结果加1得到 [1, 6] 的随机数，这也是笔者在中文互联网上搜索得到的几乎全部的答案。然而，在查看 C 参考手册 rand() 函数部分时，却发现官方示例代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    srand(time(<span class="hljs-literal">NULL</span>)); <span class="hljs-comment">// use current time as seed for random generator</span><br>    <span class="hljs-keyword">int</span> random_variable = rand();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Random value on [0,%d]: %d\n&quot;</span>, RAND_MAX, random_variable);<br> <br>    <span class="hljs-comment">// roll a 6-sided die 20 times</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> n=<span class="hljs-number">0</span>; n != <span class="hljs-number">20</span>; ++n) &#123;<br>        <span class="hljs-keyword">int</span> x = <span class="hljs-number">7</span>;<br>        <span class="hljs-keyword">while</span>(x &gt; <span class="hljs-number">6</span>) <br>            x = <span class="hljs-number">1</span> + rand()/((RAND_MAX + <span class="hljs-number">1u</span>)/<span class="hljs-number">6</span>); <span class="hljs-comment">// Note: 1+rand()%6 is biased</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,  x); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>官方示例代码为投掷一个 6 面骰子 20 次的结果，在生成 [1, 6] 的随机数部分的实现却截然不同，并且提示： 1+rand()%6 is biased，认为像上面那种简单的实现是有偏差的。</p><h2 id="为什么-1-rand-6-是有偏差的"><a href="#为什么-1-rand-6-是有偏差的" class="headerlink" title="为什么 1 + rand() % 6 是有偏差的"></a>为什么 1 + rand() % 6 是有偏差的</h2><p>首先众所周知的是 rand() 函数并不能给出真正意义上的随机数，在 rand() 函数的实现中，每给定一个唯一确定的种子(srand(seed))时，rand() 函数就会得到一个唯一确定与之对应的整数序列。也因此官方参考中也说明了不要将此函数应用于严肃的场景，例如加密。但是这个问题并不是真正导致上述方法产生偏差的原因。即使 rand() 函数能给出真正的随机数， 1 + rand() % 6 也是不正确的。这里真正的问题在于 rand() % 6，也就是取模运算，+ 1并没有影响。</p><p>来看一个极端的例子：假设 RAND_MAX = 10， 就是说 rand() 函数能够产生 [0, 10] 的随机数，现在我想要 [ 1, 3 ] 的随机数，使用 1 + rand() % 3 来产生我们想要的结果，那么对于 rand() 可能的结果 [0,1,2,3,4,5,6,7,8,9,10]，rand() % 3 得到的结果为 [ [0,1,2], [0,1,2], [0,1,2], [0, 1] ]，聪明的你现在已经看出问题了，没错，在 rand() % 3 的结果序列中 0, 1, 2 的数量并不相等，也就意味着 产生0, 1, 2 的概率并不相等，这与 rand() 的真随机与否无关。</p><h2 id="如何正确实现"><a href="#如何正确实现" class="headerlink" title="如何正确实现"></a>如何正确实现</h2><p>因此，应当保证 rand() % n 的结果中 [0, n-1] 范围内各个整数的数量相等才是正确的实现。我们可以通过限制 rand() 结果的上限来实现，也就是将其限制在 RAND_MAX范围内 n 的最大倍数内。在官方实现中是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">x = <span class="hljs-number">1</span> + rand()/((RAND_MAX + <span class="hljs-number">1u</span>)/<span class="hljs-number">6</span>);<br></code></pre></td></tr></table></figure><p>这里 RAND_MAX + 1u 将结果转为无符号型来避免 int 类型溢出。</p><p>另一种实现如下(参考stackoverflow)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> MAX =  <span class="hljs-number">6</span> * ((RAND_MAX + <span class="hljs-number">1u</span>)/<span class="hljs-number">6</span>);<br><span class="hljs-keyword">int</span> rand;<br><span class="hljs-keyword">while</span> (rand() &gt;= MAX) &#123;<br>rand = rand();<br>&#125;<br></code></pre></td></tr></table></figure><p>参考资料：[<a href="https://stackoverflow.com/questions/49878942/why-is-rand6-biased]">https://stackoverflow.com/questions/49878942/why-is-rand6-biased]</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>C/C++</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 nginx 解决 web应用中的跨域问题</title>
    <link href="/2022/03/15/%E5%85%B3%E4%BA%8E%E8%B7%A8%E5%9F%9F/"/>
    <url>/2022/03/15/%E5%85%B3%E4%BA%8E%E8%B7%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="1、使用-nginx-反向代理实现跨域"><a href="#1、使用-nginx-反向代理实现跨域" class="headerlink" title="1、使用 nginx 反向代理实现跨域"></a>1、使用 nginx 反向代理实现跨域</h2><p>前端：在 <a href="http://localhost:8080/">http://localhost:8080</a> 启动</p><p>后端：在 <a href="http://localhost:9090/">http://localhost:9090</a> 启动</p><p>在 nginx 中配置 前端部分 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">server &#123;<br>   listen       <span class="hljs-number">8080</span>;<br>   server_name  localhost;<br><br>   location / &#123;<br>        root   html;<br>        index  index.html index.htm;<br>    &#125;<br>    location /api/ &#123;<br><span class="hljs-comment">//rewrite  ^.+apis/?(.*)$ /$1 break;</span><br><span class="hljs-comment">//include  uwsgi_params;</span><br>   proxy_pass   http:<span class="hljs-comment">//localhost:9090;</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样一来，在前端中的请求地址统一使用 api/ 作为前缀，就可以实现跨域。</p><p>参考资料：[<a href="https://www.cnblogs.com/bninp/p/5694277.html]">https://www.cnblogs.com/bninp/p/5694277.html]</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>跨域</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>taro 中使用 axios 导致路由失效</title>
    <link href="/2021/12/20/taro%E4%B8%AD%E4%BD%BF%E7%94%A8axios%E4%BA%A7%E7%94%9Fbug/"/>
    <url>/2021/12/20/taro%E4%B8%AD%E4%BD%BF%E7%94%A8axios%E4%BA%A7%E7%94%9Fbug/</url>
    
    <content type="html"><![CDATA[<ol><li><p>开发环境：</p><p>taro 3.3.8   </p><p>vue 3.2.26 </p><p>axios 0.21.4</p><p>node 14.17.6</p></li><li><p>场景复现：</p><p>request.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br><span class="hljs-keyword">const</span> request = axios.create(&#123;<br>    <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&quot;/api&quot;</span>,<br>    <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>login.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../utils/request.js&quot;</span><br><br>request.post(<span class="hljs-string">&quot;/user/login&quot;</span>, postdata).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (res.code === <span class="hljs-number">200</span>) &#123;<br><span class="hljs-built_in">this</span>.$message(&#123;<br><span class="hljs-attr">type</span>: <span class="hljs-string">&quot;success&quot;</span>,<br><span class="hljs-attr">message</span>: <span class="hljs-string">&quot;登录成功!&quot;</span><br>&#125;)<br>Taro.navigateTo(&#123;<span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;/pages/home/home&#x27;</span>&#125;) <span class="hljs-comment">//登录成功之后进行页面的跳转，跳转到主页</span><br>     &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">this</span>.$message(&#123;<br><span class="hljs-attr">type</span>: <span class="hljs-string">&quot;error&quot;</span>,<br><span class="hljs-attr">message</span>: <span class="hljs-string">&quot;登录失败！&quot;</span><br>&#125;)<br>&#125;<br>&#125;) <br></code></pre></td></tr></table></figure></li></ol><p>​       这种情况下，当发起 request 请求时，能够正常与后端进行数据交互，但是Taro.navigateTo({url:’/pages/home/home’}) 并不能生效，页面还会停留在原来的页面，也不会有任何报错。</p><ol start="3"><li><p>解决方案</p><p>使用 Taro.request() 发起请求， Taro 框架的此 api 不会产生上述 bug，可以成功进行页面间的路由。需要注意的是，使用 Taro 的此 api 时，从后端返回的响应数据是完整的 http 请求的相应体，同样需要自行处理。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>taro</tag>
      
      <tag>axios</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java 与 mysql 时间戳数据交互</title>
    <link href="/2021/11/03/java%E4%B8%8Emysql%E6%97%B6%E9%97%B4%E6%88%B3%E4%BA%A4%E4%BA%92/"/>
    <url>/2021/11/03/java%E4%B8%8Emysql%E6%97%B6%E9%97%B4%E6%88%B3%E4%BA%A4%E4%BA%92/</url>
    
    <content type="html"><![CDATA[<h2 id="一、java-接收-myqsl-数据库时间戳类型数据"><a href="#一、java-接收-myqsl-数据库时间戳类型数据" class="headerlink" title="一、java 接收 myqsl 数据库时间戳类型数据"></a>一、java 接收 myqsl 数据库时间戳类型数据</h2><p>java.util.Date 类只精确到年月日，可以使用 java.sql.Timestamp 类接收时间戳类型数据（精确到秒），但如果不做其它处理，最终得到的数据会像这样：2021-03-23T02:30:00.000+0000。可以使用@JsonFormat 注解解决此问题。</p><p>首先添加对应插件包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-annotations<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--JsonFormat注解--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.codehaus.jackson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-mapper-asl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后在用来接收 mysql 数据库数据的实体类的对应属性上应用注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;GMT+8&quot;)</span><br><span class="hljs-keyword">private</span> Timestamp createdTime;<br></code></pre></td></tr></table></figure><p>这样，最终取得的数据就可以得到 pattern 中设定的样式。</p><h2 id="二、从前端传入的不同样式时间戳如何正确存入对应的实体类"><a href="#二、从前端传入的不同样式时间戳如何正确存入对应的实体类" class="headerlink" title="二、从前端传入的不同样式时间戳如何正确存入对应的实体类"></a>二、从前端传入的不同样式时间戳如何正确存入对应的实体类</h2><p>可以使用 @DateTimeFormat 注解解决，首先引用插件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- joda-time --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>joda-time<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>joda-time<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后在对应的实体类属性上使用注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;GMT+8&quot;)</span><br><span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span><br><span class="hljs-keyword">private</span> Timestamp createdTime;<br></code></pre></td></tr></table></figure><h2 id="三、spring-boot-拦截器小细节"><a href="#三、spring-boot-拦截器小细节" class="headerlink" title="三、spring boot 拦截器小细节"></a>三、spring boot 拦截器小细节</h2><p>在创建拦截器时一定要重写 HandlerInterceptor 的全部方法，即使有方法不用，否则在配置拦截器时排除路径会不生效。</p><p>参考文献：</p><p><a href="https://www.cnblogs.com/mracale/p/9828346.html">https://www.cnblogs.com/mracale/p/9828346.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/10/24/hello-world/"/>
    <url>/2021/10/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
